// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: authzed/api/v1/permission_service_ext.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PermissionsExtService_ReadRelationships_FullMethodName  = "/authzed.api.v1.PermissionsExtService/ReadRelationships"
	PermissionsExtService_WriteRelationships_FullMethodName = "/authzed.api.v1.PermissionsExtService/WriteRelationships"
)

// PermissionsExtServiceClient is the client API for PermissionsExtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionsExtServiceClient interface {
	// ReadRelationships reads a set of the relationships matching one or more
	// filters.
	ReadRelationships(ctx context.Context, in *ReadRelationshipsRequest, opts ...grpc.CallOption) (PermissionsExtService_ReadRelationshipsClient, error)
	// WriteRelationships atomically writes and/or deletes a set of specified
	// relationships. An optional set of preconditions can be provided that must
	// be satisfied for the operation to commit.
	WriteRelationships(ctx context.Context, in *WriteRelationshipsRequestExt, opts ...grpc.CallOption) (*WriteRelationshipsResponse, error)
}

type permissionsExtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionsExtServiceClient(cc grpc.ClientConnInterface) PermissionsExtServiceClient {
	return &permissionsExtServiceClient{cc}
}

func (c *permissionsExtServiceClient) ReadRelationships(ctx context.Context, in *ReadRelationshipsRequest, opts ...grpc.CallOption) (PermissionsExtService_ReadRelationshipsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PermissionsExtService_ServiceDesc.Streams[0], PermissionsExtService_ReadRelationships_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &permissionsExtServiceReadRelationshipsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PermissionsExtService_ReadRelationshipsClient interface {
	Recv() (*ReadRelationshipsResponseExt, error)
	grpc.ClientStream
}

type permissionsExtServiceReadRelationshipsClient struct {
	grpc.ClientStream
}

func (x *permissionsExtServiceReadRelationshipsClient) Recv() (*ReadRelationshipsResponseExt, error) {
	m := new(ReadRelationshipsResponseExt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *permissionsExtServiceClient) WriteRelationships(ctx context.Context, in *WriteRelationshipsRequestExt, opts ...grpc.CallOption) (*WriteRelationshipsResponse, error) {
	out := new(WriteRelationshipsResponse)
	err := c.cc.Invoke(ctx, PermissionsExtService_WriteRelationships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionsExtServiceServer is the server API for PermissionsExtService service.
// All implementations must embed UnimplementedPermissionsExtServiceServer
// for forward compatibility
type PermissionsExtServiceServer interface {
	// ReadRelationships reads a set of the relationships matching one or more
	// filters.
	ReadRelationships(*ReadRelationshipsRequest, PermissionsExtService_ReadRelationshipsServer) error
	// WriteRelationships atomically writes and/or deletes a set of specified
	// relationships. An optional set of preconditions can be provided that must
	// be satisfied for the operation to commit.
	WriteRelationships(context.Context, *WriteRelationshipsRequestExt) (*WriteRelationshipsResponse, error)
	mustEmbedUnimplementedPermissionsExtServiceServer()
}

// UnimplementedPermissionsExtServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionsExtServiceServer struct {
}

func (UnimplementedPermissionsExtServiceServer) ReadRelationships(*ReadRelationshipsRequest, PermissionsExtService_ReadRelationshipsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadRelationships not implemented")
}
func (UnimplementedPermissionsExtServiceServer) WriteRelationships(context.Context, *WriteRelationshipsRequestExt) (*WriteRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRelationships not implemented")
}
func (UnimplementedPermissionsExtServiceServer) mustEmbedUnimplementedPermissionsExtServiceServer() {}

// UnsafePermissionsExtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionsExtServiceServer will
// result in compilation errors.
type UnsafePermissionsExtServiceServer interface {
	mustEmbedUnimplementedPermissionsExtServiceServer()
}

func RegisterPermissionsExtServiceServer(s grpc.ServiceRegistrar, srv PermissionsExtServiceServer) {
	s.RegisterService(&PermissionsExtService_ServiceDesc, srv)
}

func _PermissionsExtService_ReadRelationships_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRelationshipsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PermissionsExtServiceServer).ReadRelationships(m, &permissionsExtServiceReadRelationshipsServer{stream})
}

type PermissionsExtService_ReadRelationshipsServer interface {
	Send(*ReadRelationshipsResponseExt) error
	grpc.ServerStream
}

type permissionsExtServiceReadRelationshipsServer struct {
	grpc.ServerStream
}

func (x *permissionsExtServiceReadRelationshipsServer) Send(m *ReadRelationshipsResponseExt) error {
	return x.ServerStream.SendMsg(m)
}

func _PermissionsExtService_WriteRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRelationshipsRequestExt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsExtServiceServer).WriteRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionsExtService_WriteRelationships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsExtServiceServer).WriteRelationships(ctx, req.(*WriteRelationshipsRequestExt))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionsExtService_ServiceDesc is the grpc.ServiceDesc for PermissionsExtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionsExtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authzed.api.v1.PermissionsExtService",
	HandlerType: (*PermissionsExtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteRelationships",
			Handler:    _PermissionsExtService_WriteRelationships_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadRelationships",
			Handler:       _PermissionsExtService_ReadRelationships_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "authzed/api/v1/permission_service_ext.proto",
}
