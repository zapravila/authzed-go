// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authzed/api/v1/core_ext.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RelationshipExt with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RelationshipExt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationshipExt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationshipExtMultiError, or nil if none found.
func (m *RelationshipExt) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationshipExt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResource() == nil {
		err := RelationshipExtValidationError{
			field:  "Resource",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipExtValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipExtValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipExtValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRelation()) > 64 {
		err := RelationshipExtValidationError{
			field:  "Relation",
			reason: "value length must be at most 64 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RelationshipExt_Relation_Pattern.MatchString(m.GetRelation()) {
		err := RelationshipExtValidationError{
			field:  "Relation",
			reason: "value does not match regex pattern \"^[a-z][a-z0-9_]{1,62}[a-z0-9]$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSubject() == nil {
		err := RelationshipExtValidationError{
			field:  "Subject",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSubject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipExtValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipExtValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipExtValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOptionalDescription() != "" {

	}

	if m.GetOptionalComment() != "" {

	}

	if all {
		switch v := interface{}(m.GetOptionalCaveat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipExtValidationError{
					field:  "OptionalCaveat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipExtValidationError{
					field:  "OptionalCaveat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptionalCaveat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipExtValidationError{
				field:  "OptionalCaveat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RelationshipExtMultiError(errors)
	}

	return nil
}

// RelationshipExtMultiError is an error wrapping multiple validation errors
// returned by RelationshipExt.ValidateAll() if the designated constraints
// aren't met.
type RelationshipExtMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationshipExtMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationshipExtMultiError) AllErrors() []error { return m }

// RelationshipExtValidationError is the validation error returned by
// RelationshipExt.Validate if the designated constraints aren't met.
type RelationshipExtValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipExtValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipExtValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipExtValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipExtValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipExtValidationError) ErrorName() string { return "RelationshipExtValidationError" }

// Error satisfies the builtin error interface
func (e RelationshipExtValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipExt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipExtValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipExtValidationError{}

var _RelationshipExt_Relation_Pattern = regexp.MustCompile("^[a-z][a-z0-9_]{1,62}[a-z0-9]$")

// Validate checks the field values on RelationshipUpdateExt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationshipUpdateExt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationshipUpdateExt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationshipUpdateExtMultiError, or nil if none found.
func (m *RelationshipUpdateExt) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationshipUpdateExt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _RelationshipUpdateExt_Operation_NotInLookup[m.GetOperation()]; ok {
		err := RelationshipUpdateExtValidationError{
			field:  "Operation",
			reason: "value must not be in list [OPERATION_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := RelationshipUpdateExt_Operation_name[int32(m.GetOperation())]; !ok {
		err := RelationshipUpdateExtValidationError{
			field:  "Operation",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRelationship() == nil {
		err := RelationshipUpdateExtValidationError{
			field:  "Relationship",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRelationship()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RelationshipUpdateExtValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RelationshipUpdateExtValidationError{
					field:  "Relationship",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelationship()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipUpdateExtValidationError{
				field:  "Relationship",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RelationshipUpdateExtMultiError(errors)
	}

	return nil
}

// RelationshipUpdateExtMultiError is an error wrapping multiple validation
// errors returned by RelationshipUpdateExt.ValidateAll() if the designated
// constraints aren't met.
type RelationshipUpdateExtMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationshipUpdateExtMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationshipUpdateExtMultiError) AllErrors() []error { return m }

// RelationshipUpdateExtValidationError is the validation error returned by
// RelationshipUpdateExt.Validate if the designated constraints aren't met.
type RelationshipUpdateExtValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipUpdateExtValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipUpdateExtValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipUpdateExtValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipUpdateExtValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipUpdateExtValidationError) ErrorName() string {
	return "RelationshipUpdateExtValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipUpdateExtValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipUpdateExt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipUpdateExtValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipUpdateExtValidationError{}

var _RelationshipUpdateExt_Operation_NotInLookup = map[RelationshipUpdateExt_Operation]struct{}{
	0: {},
}
